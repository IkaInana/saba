import mongoose, { Schema, Document } from 'mongoose';

export interface IUser extends Document {
    username: string;
    password: string;
    email: string;
    role: 'user' | 'admin';
    active: boolean;
}

const UserSchema: Schema = new Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    role: { type: String, enum: ['user', 'admin'], default: 'user' },
    active: { type: Boolean, default: true },
});

export default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);

import mongoose, { Schema, Document } from 'mongoose';

export interface IProduct extends Document {
    name: string;
    price: number;
    description: string;
    active: boolean;
}

const ProductSchema: Schema = new Schema({
    name: { type: String, required: true },
    price: { type: Number, required: true },
    description: { type: String, required: true },
    active: { type: Boolean, default: true },
});

export default mongoose.models.Product || mongoose.model<IProduct>('Product', ProductSchema);

import mongoose, { Schema, Document } from 'mongoose';
import { IProduct } from './Product';
import { IUser } from './User';

export interface IBasket extends Document {
    user: IUser['_id'];
    products: { product: IProduct['_id']; quantity: number }[];
}

const BasketSchema: Schema = new Schema({
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    products: [
        {
            product: { type: Schema.Types.ObjectId, ref: 'Product', required: true },
            quantity: { type: Number, required: true, default: 1 },
        },
    ],
});

export default mongoose.models.Basket || mongoose.model<IBasket>('Basket', BasketSchema);

import mongoose, { Schema, Document } from 'mongoose';
import { IProduct } from './Product';
import { IUser } from './User';

export interface IHistory extends Document {
    user: IUser['_id'];
    products: { product: IProduct['_id']; quantity: number }[];
    date: Date;
}

const HistorySchema: Schema = new Schema({
    user: { type: Schema.Types.ObjectId, ref: 'User', required: true },
    products: [
        {
            product: { type: Schema.Types.ObjectId, ref: 'Product', required: true },
            quantity: { type: Number, required: true },
        },
    ],
    date: { type: Date, default: Date.now },
});

export default mongoose.models.History || mongoose.model<IHistory>('History', HistorySchema);

import { NextApiRequest, NextApiResponse } from 'next';
import jwt from 'jsonwebtoken';

export const authMiddleware = (req: NextApiRequest, res: NextApiResponse, next: Function) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
        return res.status(401).json({ message: 'Unauthorized' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');
        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

import { NextApiRequest, NextApiResponse } from 'next';

export const adminMiddleware = (req: NextApiRequest, res: NextApiResponse, next: Function) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
    }
    next();
};

import mongoose from 'mongoose';

const dbConnect = async () => {
    if (mongoose.connections[0].readyState) {
        return;
    }

    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/ecommerce', {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    });
};

export default dbConnect;

import axios from 'axios';

const instance = axios.create({
    baseURL: '/api',
});

export default instance;

import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '../../utils/dbConnect';
import User from '../../models/User';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req;
    await dbConnect();

    switch (method) {
        case 'POST': 
            try {
                const user = await User.create(req.body);
                res.status(201).json({ success: true, data: user });
            } catch (error) {
                res.status(400).json({ success: false });
            }
            break;

        case 'PUT': 
            break;

        case 'DELETE': 
            break;

        default:
            res.status(400).json({ success: false });
            break;
    }
}

import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '../../utils/dbConnect';
import Product from '../../models/Product';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req;
    await dbConnect();

    switch (method) {
        case 'GET': 
            try {
                const products = await Product.find({});
                res.status(200).json({ success: true, data: products });
            } catch (error) {
                res.status(400).json({ success: false });
            }
            break;

        case 'POST': 
            try {
                const product = await Product.create(req.body);
                res.status(201).json({ success: true, data: product });
            } catch (error) {
                res.status(400).json({ success: false });
            }
            break;

        case 'PUT': 
            break;

        case 'DELETE': 
            break;

        default:
            res.status(400).json({ success: false });
            break;
    }
}

import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '../../utils/dbConnect';
import Basket from '../../models/Basket';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req;
    await dbConnect();

    switch (method) {
        case 'POST': 
            try {
                const basket = await Basket.create(req.body);
                res.status(201).json({ success: true, data: basket });
            } catch (error) {
                res.status(400).json({ success: false });
            }
            break;

        case 'PUT': 
            break;

        case 'DELETE': 
            break;

        default:
            res.status(400).json({ success: false });
            break;
    }
}

import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '../../utils/dbConnect';
import History from '../../models/History';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const
